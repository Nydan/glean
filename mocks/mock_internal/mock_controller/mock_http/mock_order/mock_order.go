// Code generated by MockGen. DO NOT EDIT.
// Source: internal/controller/http/order/order.go

// Package mock_order is a generated GoMock package.
package mock_order

import (
	gomock "github.com/golang/mock/gomock"
	order "github.com/nydan/glean/internal/entity/order"
	reflect "reflect"
)

// MockorderUseCase is a mock of orderUseCase interface
type MockorderUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockorderUseCaseMockRecorder
}

// MockorderUseCaseMockRecorder is the mock recorder for MockorderUseCase
type MockorderUseCaseMockRecorder struct {
	mock *MockorderUseCase
}

// NewMockorderUseCase creates a new mock instance
func NewMockorderUseCase(ctrl *gomock.Controller) *MockorderUseCase {
	mock := &MockorderUseCase{ctrl: ctrl}
	mock.recorder = &MockorderUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockorderUseCase) EXPECT() *MockorderUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockorderUseCase) Create() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(string)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockorderUseCaseMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockorderUseCase)(nil).Create))
}

// Select mocks base method
func (m *MockorderUseCase) Select(id int) (order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", id)
	ret0, _ := ret[0].(order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select
func (mr *MockorderUseCaseMockRecorder) Select(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockorderUseCase)(nil).Select), id)
}
